---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getEntryBySlug } from 'astro:content';
import TagContainer from './TagContainer.astro';
import { GetDuration } from "../scripts/utilities.ts";
import AstroIcon from '../images/icons/skill-icons/AstroIcon.astro';
import { Tag } from '../scripts/tags';
import Unity from '../images/icons/skill-icons/Unity.astro';
import Svelte from '../images/icons/skill-icons/Svelte.astro';
import Obsidian from '../images/icons/skill-icons/Obsidian.astro';

export interface Props {
    project: CollectionEntry<'projects'> | string;
}

interface EntryMetadata {
    id: string;
    slug: string;
}

const { project } = Astro.props as Props;

let projectCollectionEntry: CollectionEntry<'projects'>;

if (typeof project === "string") {
    const result = (await getEntryBySlug("projects", project));
    if (result)
        projectCollectionEntry = result;
    else {
        console.error("Cannot find project: " + project);
        return;
    }
}
else
    projectCollectionEntry = project;

const data = projectCollectionEntry.data;
const metadata: EntryMetadata = { 
    id: projectCollectionEntry.id,
    slug: projectCollectionEntry.slug
};

const dateOptions: Intl.DateTimeFormatOptions = { day: "numeric", month: "long", year: "numeric" };
const userLocale="en-UK";
const today = new Date();
// If release date is undefined, set end date to today
const endDate = data.releaseDate ?? today;

const duration = GetDuration(data.startDate, endDate);
const startDateString = data.startDate.toLocaleDateString(userLocale, dateOptions);
const endDateString = data.releaseDate ? data.releaseDate.toLocaleDateString(userLocale, dateOptions) : "Ongoing";
const dateAndDurationString = `${startDateString} - ${endDateString} (${duration})`;

function GetNumberOfDays(startDate: Date, endDate: Date) {
    const numberOfMilisecondsInDay = 1000 * 60 * 60 * 24;
    return Math.abs(endDate.getTime() - startDate.getTime()) / numberOfMilisecondsInDay;
}
---

<a href=`/projects/${metadata.slug}/` class="card project-card" 
        data-title={data.title} 
        data-tags={data.tags} 
        data-rank={data.rank}
        data-time-since-created={GetNumberOfDays(data.startDate, today)}
        data-time-since-released={GetNumberOfDays(endDate, today)}
        data-duration={GetNumberOfDays(data.startDate, endDate)}
        data-astro-prefetch>
    <div class="thumbnail-container">
        <Image 
            class="loading-spinner thumbnail"
            src={data.thumbnailImg} 
            alt={"Thumbnail for " + data.title} 
            widths={[ 220, 540, 720, data.thumbnailImg.width]}>
        </Image>
        <!-- Looks slightly messy but not sure what other way to do this -->
        {
        // If uses Unity
        data.tags.includes("Unity") ? 
            <Unity class:list="tool-icon"/> :
            // If uses Astro
            data.tags.includes("Astro") ? 
                <AstroIcon class:list="tool-icon"/> :
                // If uses Obsidian
                data.tags.includes("Obsidian") ? 
                    <Obsidian class:list="tool-icon"/> :
                    // If uses Svelte
                    data.tags.includes("SvelteKit") && <Svelte  class:list="tool-icon"/>

    }
    </div>
    <div class="project-details">
        <p class="project-title">{data.title}</p>
        <div class="tag-container">
            <!-- <span>Tags:</span> -->
            <TagContainer tags={data.tags}/>
        </div>
        <p class="project-date">Date: <i>{dateAndDurationString}</i></p>
        <p class="project-description">{data.shortDescription}</p>
    </div>
    {data.isFeatured && <div class="featured-ribbon"><span>Featured</span></div>}
</a>

<style>
    :global(.dark) .project-card:hover {
        --box-shadow-color: #ffffff40;
    }

    :global(.light) .project-card:hover {
        --box-shadow-color: #00000040;
    }

    .project-card {
        --box-shadow-color: #00000040;

        display: flex;
        position: relative; /* For ribbon */

        /* max-height: 12.5rem; */
        height: max-content;

        gap: 1em;
        text-decoration: none;

        color: var(--color-text);
        border: 2px solid #555;

        /* Since transitions is being overwritten in /projects/ page, use this to set the duration */
        --hover-transform-duration: 0.5s;
        --hover-box-shadow-duration: 0.5s;

        transition: transform var(--hover-transform-duration), box-shadow var(--hover-box-shadow-duration);

        &:hover {
            --hover-transform-duration: 0.25s;
            --hover-box-shadow-duration: 0.4s;

            transform: translate(5px, -5px);
            box-shadow: -7px 7px 5px 0px var(--box-shadow-color);
        }
    }

    a:visited.project-card {
        color: var(--color-text);
    }
    
    .project-card .thumbnail-container {
        display: flex;
        justify-content: center;
        
        position: relative;
        
        width: 25%;
        min-width: 25%;
        height: 100%;

        .thumbnail {
            width: 100%;
            border-radius: 0.5em;
            backdrop-filter: none;
            object-fit: contain;
        }
    }

    .project-card .tool-icon {
        --offset-amt: -0.4em;
        position: absolute;
        right: var(--offset-amt);
        bottom: var(--offset-amt);

        width: 3em;
        height: 3em;
        
        border: 1.5px solid white;
        border-radius: 0.75em;
    }

    .project-details {
        align-self: center;
        height: min-content;

        text-wrap: pretty;
        
        p {
            margin: 0;
        }

        .project-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 0.75em;
        }

        .tag-container {
            display: flex;
            margin: 0.5em 0;

            > span {
                margin-right: 0.6em;
                font-size: 0.9em;
            }
        }

        .project-date {
            font-size: 0.9em;
            opacity: 0.6 !important;
            margin-bottom: 0.1em;
        }
    }

    /* Ribbon base CSS from: https://codepen.io/nxworld/pen/oLdoWb */
    .featured-ribbon {
        --ribbon-size: 125px;
        --ribbon-space: 8px;
        width: var(--ribbon-size);
        height: var(--ribbon-size);
        overflow: hidden;
        position: absolute;
        top: calc(var(--ribbon-space) * -1);
        right: calc(var(--ribbon-space) * -1);
    }
    .featured-ribbon::before,
    .featured-ribbon::after {
        position: absolute;
        z-index: -2;
        content: '';
        display: block;
        border: calc(var(--ribbon-space) * 0.5 - 0.5px) solid color-mix(in srgb, var(--color-primary) 80%, #000 20%);
    }
    .featured-ribbon::before {
        top: 0;
        left: 0;
    }
    .featured-ribbon::after {
        bottom: 0;
        right: 0;
    }
    .featured-ribbon span {
        position: absolute;
        display: block;
        width: calc(var(--ribbon-size) * 1.5);
        padding: calc(var(--ribbon-space) * 1.5) 0;
        background-color: var(--color-primary);
        color: #fff;
        font: 700 14px/1 'Lato', sans-serif;
        text-transform: uppercase;
        text-align: center;
        left: -18px;
        top: 30px;
        transform: rotate(45deg);
    }

    @media (max-width: 60em) {
        .project-card {
            flex-direction: column;
            max-height: none;
        }

        .project-card .thumbnail-container {
            width: 100%;
            max-height: 10em !important;
        }

        .project-details {
            align-self: flex-start;
        }
    }

</style>