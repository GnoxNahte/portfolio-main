---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

export interface Props {
    image: ImageMetadata;
    alt: string;
}

const { image, alt } = Astro.props as Props;
---

<div class="expand-img-container">
    <div class="expanded-container" aria-hidden="true">
        <Image src={image} alt={alt + " - Expanded"} class="expanded-img"/>
    </div>
    <Image src={image} alt={alt} class="unexpanded-img" widths={[240, 540, 720, image.width]}/>
</div>

<style>

    .expand-img-container {
        /* width: fit-content; */
        cursor: zoom-in;

        img {
            margin: 0;
        }

        &:not(.expanded) {
            .expanded-container {
                display: none;
                opacity: 0;
                
            }
        }
        &.expanded {
            cursor: zoom-out;

            .expanded-container {
                display: block;
                opacity: 1;

                @starting-style {
                    opacity: 0;
                }
            }
        }
    }

    .expanded-container {
        --transition-duration: 0.5s;
        transition: backdrop-filter 2s linear, 
                    opacity var(--transition-duration), 
                    display var(--transition-duration), 
                    overlay var(--transition-duration);
        transition-behavior: allow-discrete;
        position: fixed;
        backdrop-filter: blur(5px) brightness(0.4);
        width: 100dvw;
        height: 100dvh;
        left: 0;
        top: 0;
        bottom: 0;
        z-index: 1000;
        img {
            min-width: 90%;
            min-height: 90%;
            object-fit: contain;
            
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
            background-color: transparent;
        }
    }
</style>

<script>
    function OnClicked(container: HTMLDivElement) {
        container.classList.toggle("expanded");

        // TODO: Try view transitions. Currently "works but if there any view-transition-name, that animation will overlap this one."
        // if (!document.startViewTransition) {
        //     Transition();
        //     return;
        // }
        
        // const transition = document.startViewTransition(() => Transition());
        // transition.ready.then(() => {
        //     document.documentElement.animate({
        //         zIndex: 1000,
        //     })
        // });
    }
    const imgContainers = document.getElementsByClassName("expand-img-container");
    for (const imgContainer of imgContainers) {
        const contianer = imgContainer as HTMLDivElement;
        contianer.addEventListener("click", () => OnClicked(contianer));
    }
</script>