---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

export interface Props {
    image: ImageMetadata;
}

const { image } = Astro.props as Props;
---

<div class="expand-img-container reset">
    <Image src={image} alt="Test"/>
</div>
<!-- For when the container expand and position: fixed -->
 
<!-- TODO: TO fix? When transitioning to expanded, the container changes to position:fixed 
which makes content below takeover the image's space  -->

<style>
    .expand-img-container {
        transition: backdrop-filter 1s linear;

        max-width: 100%;
        cursor: zoom-in;

        img {
            /* animation: 1s linear reset-anim; */
            max-width: 100%;
        }
    }

    @keyframes expand-anim {
        from { opacity: 0.9; }
        30% { opacity: 0.6; }
        100% { opacity: 1; }
    }

    @keyframes reset-anim {
        from { opacity: 1; }
        30% { opacity: 0.6; }
        100% { opacity: 1; }
    }

    .expand-img-container.expanded {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;margin-top: 0;
        z-index: 1000;
        padding: 10px;
        backdrop-filter: blur(5px) brightness(0.4);

        cursor: zoom-out;

        img {
            /* animation: 1s linear expand-anim; */
            width: 100%;
            height: 100%;
            object-fit: contain;
            z-index: 1000;
        }
    }
</style>

<script>
    function OnClicked(container: HTMLDivElement) {
        container.classList.toggle("expanded");

        // TODO: Try view transitions. Currently "works but if there any view-transition-name, that animation will overlap this one."
        // if (!document.startViewTransition) {
        //     Transition();
        //     return;
        // }
        
        // const transition = document.startViewTransition(() => Transition());
        // transition.ready.then(() => {
        //     document.documentElement.animate({
        //         zIndex: 1000,
        //     })
        // });
    }
    const imgContainers = document.getElementsByClassName("expand-img-container");
    for (const imgContainer of imgContainers) {
        const contianer = imgContainer as HTMLDivElement;
        contianer.addEventListener("click", () => OnClicked(contianer));
    }
</script>