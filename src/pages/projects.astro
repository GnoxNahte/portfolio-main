---
import { getCollection } from "astro:content";
import ProjectCard from "../components/ProjectCard.astro";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import SearchIcon from "../images/common/SearchIcon.svg";
import { tags } from "../scripts/tags";
import TagContainer from "../components/TagContainer.astro";

const projects = await getCollection("projects", ({data}) => {
    return !data.isUnlisted;
});

// Sort by rank, lower rank first
projects.sort((a, b) => {
    if (a.data.rank < b.data.rank)
        return -1;
    else if (a.data.rank == b.data.rank)
        return 0;
    else
        return 1;
})
---
<Layout title="Projects" description="A list of all the projects I've worked.">
    <h1>Projects</h1>
    <div class="container">
        <div class="filter-panel card">
            <div class="search-bar">
                <Image src={SearchIcon} alt="Search Icon" class:list="search-icon"/>
                <!-- TODO: Add keyword -->
                <input type="search" id="search-input" placeholder="Search by Title or tag"/>
            </div>
            <div class="radio-tab-selection">
                <input type="radio" id="tab-tag" value="tab-tag" name="tab-selection" checked> 
                <label for="tab-tag">Tag</label>
                <input type="radio" id="tab-options" value="tab-options" name="tab-selection"> 
                <label for="tab-options">Options</label>
            </div>
            <div class="filter-tag-tab">
            {
                tags.childTags.map(tag => 
                    <div class="filter-tag-container">
                        <span>{tag.tag}</span>
                        <TagContainer tags={tag.childTags}/>
                        {/* { tag.childTags.length !== 0 && 
                            <ul>
                                {
                                    tag.childTags.map(tagChild1 => 
                                        <li>{tagChild1.tag}</li>
                                    )
                                }
                            </ul>
                        } */}
                    </div>
                )
            }
            </div>
        </div>
        <div class="project-container">
            { projects.map((project) => <ProjectCard project={project}/>) }
            <div class="card" id="no-project-found">No projects found. If the project should be here or if you want me to work on a project with that specifications, please <a href="/about/">contact me</a></div>
            <aside>Note: Actual time spent on each project may vary as most projects are done during my free time.</aside>
        </div>
    </div>
</Layout>

<style>
    h1 {
        text-align: center;
    }

    .container {
        max-width: fit-content;
        display: flex;
        gap: 1em;
        margin-bottom: 5em;
    }
    
    .filter-panel {
        display: flex;
        position: sticky;
        top: 1em;
        width: 15em;
        min-width: 10em;
        height: fit-content;
        flex-direction: column;
        gap: 1em;

        hr {
            border-color: grey;
        }
    }

    .search-bar {
        display: flex;
        position: relative;

        /* TODO: Shift this to input[type="search"]::after */
        .search-icon {
            display: block;
            position: absolute;
            height: 1em;
            top: 0.6em;
            left: 0.6em;
        }

        input {
            width: 100%;
        }
    }

    .filter-tag-tab {
        display: flex;
        flex-direction: column;
        gap: 1em;

        .filter-tag-container ul {
            margin-top: 0.2em;
        }

        .tag {
            user-select: none;
            cursor: pointer;
            filter: none;
            width: fit-content;

            transition-property: opacity, padding, color, background-color;
            transition-duration: 0.2s;

            &:not(.include-tag):not(.exclude-tag) {
                opacity: 0.7;
            }

            &.include-tag, &.exclude-tag {
                padding-left: 1em;
            }

            &.exclude-tag {
                background-color: var(--color-secondary);
                color: white;
            }

            &::before {
                content: "";
                opacity: 0;
                position: absolute;
                font-size: 1.2em;
                font-weight: 800;
                transform-origin: center;
                transition: opacity 0.2s;
            }

            &.include-tag::before {
                content: "+ ";
                opacity: 1;
                transform: translate(-0.75em, -0.2em);
            }

            &.exclude-tag::before {
                content: "- ";
                opacity: 1;
                transform: translate(-0.6em, -0.2em);
            }

            @keyframes fade-in {
                from { opacity: 0%; }
                to { opacity: 100%; }
            }
        }
    }

    .project-container {
        display: flex;
        flex-direction: column;
        /* gap: 1em; */

        --project-card-max-height: 15em;
        --anim-duration: 1.2s;

        .project-card {
            margin-bottom: 1em;
            max-height: var(--project-card-max-height);
            margin-bottom: 1em;
        }

        :not(.hide) {
            animation: 1s linear showCard both;
            animation: 0.75s cubic-bezier(0.42, 0.07, 0.55, 2) showCard both;
        }

        .hide {
            animation: 1s cubic-bezier(0.25,-1.2, 0.4, 2) hideCard both;
        }

        /* Delay based on child */
        /* .just-changed {
            --animiation-delay-amt: 0.05s;
            &:nth-child(1) { animation-delay: calc(var(--animiation-delay-amt) * 1); }
            &:nth-child(2) { animation-delay: calc(var(--animiation-delay-amt) * 2); }
            &:nth-child(3) { animation-delay: calc(var(--animiation-delay-amt) * 3); }
            &:nth-child(4) { animation-delay: calc(var(--animiation-delay-amt) * 4); }
            &:nth-child(5) { animation-delay: calc(var(--animiation-delay-amt) * 5); }
            &:nth-child(6) { animation-delay: calc(var(--animiation-delay-amt) * 6); }
            &:nth-child(7) { animation-delay: calc(var(--animiation-delay-amt) * 7); }
            &:nth-child(8) { animation-delay: calc(var(--animiation-delay-amt) * 8); }
            &:nth-child(9) { animation-delay: calc(var(--animiation-delay-amt) * 9); }
            &:nth-child(10) { animation-delay: calc(var(--animiation-delay-amt) * 10); }
        } */
    }

    @keyframes hideCard {
        from {
            max-height: var(--project-card-max-height); 
            opacity: 1;
            padding: 1em;
        }
        
        to {
            border-width: 0;
            max-height: 0;
            padding: 0 1em;
            margin-bottom: 0;
            opacity: 0;
        }
    }
    
    @keyframes showCard {
        from {
            border-width: 0;
            max-height: 0;
            padding: 0 1em;
            margin-bottom: 0;
            opacity: 0;
        }

        to {
            max-height: var(--project-card-max-height); 
            /* padding: 1em;
            margin-bottom: 1em; */
            opacity: 1;
        }
    }
    
    /* When ProjectCard changes their height. 
        Not really a good solution but not sure any other solution */
    @media (max-width: 60em) {
        .project-container {
            --project-card-max-height: 25em;
        }
    }

    @media (max-width: 40em) {
        .container {
            flex-direction: column;
        }

        .filter-panel {
            position: static;
            width: calc(100% - 2em);
        }

        .filter-tag-tab {
            flex-direction: row;
            flex-wrap: wrap;

            /* .filter-tag-container { */
                /* TODO: Test this, wrap with background color? */
                /* padding: 0.5em; */
                /* border: 2px solid #666; */
                /* background-color: color-mix(in srgb, var(--color-secondary) 100%, var(--tag-color) 25%); */

                /* border-radius: 0.5em; */
                /* width: fit-content; */
            /* } */
        }
    }
</style>

<script>
    let includeTags: string[] = [];
    let excludeTags: string[] = [];
    
    const includeTagClass = "include-tag";
    const excludeTagClass = "exclude-tag";

    let searchText = "";

    interface ProjectCardData {
        projectCardEl: HTMLAnchorElement;
        tags: string[];
        title: string;
    }

    const projectElements = document.getElementsByClassName("project-card");
    const projectsData = new Array<ProjectCardData>();

    const filterPanel = document.querySelector(".filter-panel") as HTMLDivElement;

    const noProjectsFoundCard = document.getElementById("no-project-found");
    
    // Retrieving the project data for easier use later
    for (const project of projectElements) {
        const projectHtmlAnchorEl = project as HTMLAnchorElement;
        const tags = projectHtmlAnchorEl.dataset.tags?.split(',');
        const title = projectHtmlAnchorEl.dataset.title;
        if (!tags || !title) {
            console.error("Can't find project tag / title");
            continue;
        }

        const data: ProjectCardData = {
            projectCardEl: projectHtmlAnchorEl,
            tags: tags,
            title: title,
        };
        projectsData.push(data)
    }
    
    GetInfoFromURL();
    UpdateProjectVisibility();

    function GetInfoFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlParams.entries());

        const urlSearchInput = params["searchText"];
        if (urlSearchInput !== undefined) {
            searchText = urlSearchInput;
        }
        
        const urlIncludeTags = params["includeTags"];
        if (urlIncludeTags !== undefined)
            includeTags = JSON.parse(urlIncludeTags);
        else
            includeTags = []; // Reset if not in url

        const urlExcludeTags = params["excludeTags"];
        if (urlExcludeTags !== undefined)
            excludeTags = JSON.parse(urlExcludeTags);
        else
            excludeTags = []; // Reset if not in url
    }

    // Selecting space bar if user presses '/'
    document.addEventListener('keydown', (event) => {
        if (event.key == '/') {
            searchInput.focus();
            event.preventDefault();
        }
    });

    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    searchInput?.addEventListener("input", () => {
        searchText = searchInput.value;
        UpdateProjectVisibility();
    });

    const tags = filterPanel.getElementsByClassName("tag");
    for (const tag of tags) {
        const tagValue = (tag as HTMLElement).dataset.tag;
        if (!tagValue)
        {
            console.error("Can't find tag");
            continue;
        }

        tag.addEventListener("click", () => {
            // Replace include with exclude class
            if (tag.classList.contains(includeTagClass)) {
                tag.classList.replace(includeTagClass, excludeTagClass);
                
                includeTags.splice(includeTags.indexOf(tagValue), 1);
                excludeTags.push(tagValue);
            }
            // Remove exclude class (This tag isn't included or excluded)
            else if (tag.classList.contains("exclude-tag")) {
                tag.classList.remove(excludeTagClass);
                
                excludeTags.splice(excludeTags.indexOf(tagValue), 1);
            }
            // Add Include class
            else {
                tag.classList.add(includeTagClass);
                
                includeTags.push(tagValue);
            }

            UpdateProjectVisibility();
        })
    }

    function UpdateProjectVisibility() {
        let count = 0;
        // console.log(`IncludeTags: ${includeTags} \nExcludeTags: ${excludeTags}`);
        for (const project of projectsData) {
            const ifShow = 
                (!searchText || project.title.includes(searchText)) &&
                // Check if the project includes all include tags
                // (includeTags.length === 0 || project.tags.some((el) => includeTags.includes(el))) && // Check if ANY include tag
                (includeTags.length === 0 || includeTags.every((el) => project.tags.includes(el))) && // Check if ALL include tag
                // Check if the project has any of the excluded tags
                (excludeTags.length === 0 || excludeTags.some((el) => !project.tags.includes(el)));
            
            if (ifShow)
                count++;
            
            // project.projectCardEl.classList.remove("just-changed");
            // if (project.projectCardEl.classList.contains("hide") === ifShow) 
            //     project.projectCardEl.classList.add("just-changed");
            project.projectCardEl?.classList.toggle("hide", !ifShow)
        }

        // Hide this if there is at least 1 project
        noProjectsFoundCard?.classList.toggle("hide", count > 0);
    }
</script>