---
import { getCollection } from "astro:content";
import ProjectCard from "../components/ProjectCard.astro";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import SearchIcon from "../images/common/SearchIcon.svg";
import { tags } from "../scripts/tags";
import TagContainer from "../components/TagContainer.astro";

import SortAscending from "../images/icons/SortAscending.astro";
import SortDescending from "../images/icons/SortDescending.astro";

const projects = await getCollection("projects", ({data}) => {
    return !data.isUnlisted;
});

// Sort by rank, lower rank first
projects.sort((a, b) => {
    if (a.data.rank < b.data.rank)
        return -1;
    else if (a.data.rank == b.data.rank)
        return 0;
    else
        return 1;
})
---
<Layout title="Projects" description="A list of all the projects I've worked.">
    <h1>Projects</h1>
    <div class="container">
        <div class="filter-panel card">
            <h2>Filter by...</h2>
            <div class="search-bar">
                <Image src={SearchIcon} alt="Search Icon" class:list="search-icon"/>
                <!-- TODO: Add keyword -->
                <input type="search" id="search-input" placeholder="Search by Title or tag"/>
            </div>
            <!-- <h3>Tags</h3> -->
            <div class="filter-tag-tab">
            {
                tags.childTags.map(tag => 
                    <div class="filter-tag-container">
                        <span>{tag.tag}</span>
                        <TagContainer tags={tag.childTags}/>
                        {/* { tag.childTags.length !== 0 && 
                            <ul>
                                {
                                    tag.childTags.map(tagChild1 => 
                                        <li>{tagChild1.tag}</li>
                                    )
                                }
                            </ul>
                        } */}
                    </div>
                )
            }
            </div>
            <!-- <h3>Others</h3> -->
            <div class="filter-options-tab">
                <label for="sort-by">Sort by</label>
                <div class="filter-options">
                    <select name="sort" id="sort-by">
                        <option value="default" title="How I rank the projects. Based on how well the final product was, how complex it was, etc.">Default (Personal rank)</option>
                        <option value="time-since-created" title="Sort by time since created">Time since Created</option>
                        <option value="time-since-released" title="Sort by time since released">Time since Released</option>
                        <option value="duration" title="Duration spent on the project. Ongoing projects have their duration calculated using today as the release date.">Duration</option>
                        <option value="alphabetically">Alphabetically</option>
                    </select>
                    <div class="sort-order-icon">
                        <SortAscending class:list="ascending"/>
                        <SortDescending class:list="descending"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="project-container">
            { projects.map((project) => <ProjectCard project={project}/>) }
            <div class="card" id="no-project-found">No projects found. If the project should be here or if you want me to work on a project with that specifications, please <a href="/about/">contact me</a></div>
            <aside>Note: Actual time spent on each project may vary as most projects are done during my free time.</aside>
        </div>
    </div>
</Layout>

<style>
    h1 {
        text-align: center;
    }

    .container {
        max-width: fit-content;
        display: flex;
        gap: 1em;
        margin-bottom: 5em;
    }
    
    .filter-panel {
        display: flex;
        position: sticky;
        top: 1em;
        width: 15em;
        min-width: 10em;
        height: fit-content;
        flex-direction: column;
        gap: 1em;

        hr {
            border-color: grey;
        }

        h2 {
            margin-top: 0;
            margin-bottom: 0;
            padding-left: 0.25em;
        }

        h3 {
            margin: 0;
        }
    }

    .search-bar {
        display: flex;
        position: relative;

        /* TODO: Shift this to input[type="search"]::after */
        .search-icon {
            display: block;
            position: absolute;
            height: 1em;
            top: 0.75em;
            left: 0.8em;
        }

        input {
            width: 100%;
        }
    }

    .filter-tag-tab {
        display: flex;
        flex-direction: column;
        row-gap: 0.7em;
        column-gap: 1em;

        .filter-tag-container ul {
            margin-top: 0.2em;
        }

        .tag {
            user-select: none;
            cursor: pointer;
            filter: none;
            width: fit-content;

            transition-property: opacity, padding, color, background-color;
            transition-duration: 0.2s;

            &:not(.include-tag):not(.exclude-tag) {
                opacity: 0.7;
            }

            &.include-tag, &.exclude-tag {
                padding-left: 1em;
            }

            &.exclude-tag {
                background-color: var(--color-secondary);
                color: white;
            }

            &::before {
                content: "";
                opacity: 0;
                position: absolute;
                font-size: 1.2em;
                font-weight: 800;
                transform-origin: center;
                transition: opacity 0.2s;
            }

            &.include-tag::before {
                content: "+ ";
                opacity: 1;
                transform: translate(-0.75em, -0.2em);
            }

            &.exclude-tag::before {
                content: "- ";
                opacity: 1;
                transform: translate(-0.6em, -0.2em);
            }

            @keyframes fade-in {
                from { opacity: 0%; }
                to { opacity: 100%; }
            }
        }
    }

    .filter-options {
        display: flex;
        gap: 0.75em;
        margin-top: 0.2em;

        select {
            width: 100%;
            height: 100%;
        }
    }

    .sort-order-icon {
        /* width: 32px; */
        padding: 0.3em;
        border: 2px solid #555;
        border-radius: 0.5em;
        background-color: var(--color-background-secondary);
        cursor: pointer;
        position: relative;
        width: 1.75em;

        svg {
            position: absolute;

            transition-property: width, height, opacity, transform;
            transition-duration: 0.5s;
            transition-timing-function: ease-in-out;
        }

        &:not(.descending) svg.descending {
            /* width: 0;
            height: 0; */
            opacity: 0;
            transform: rotate(-90deg) scale(0);
        }

        &.descending svg.ascending {
            /* width: 0;
            height: 0; */
            opacity: 0;
            transform: rotate(90deg) scale(0);
        }
    }

    .project-container {
        display: flex;
        flex-direction: column;

        --project-card-max-height: 15em;
        --anim-duration: 1.2s;

        .project-card {
            margin-bottom: 1em;
            max-height: var(--project-card-max-height);
            margin-bottom: 1em;
        }

        :not(.hide) {
            /* animation: 1s linear showCard both; */
            animation: 0.75s cubic-bezier(0.42, 0.07, 0.55, 2) showCard both;
        }

        .hide {
            animation: 1s cubic-bezier(0.25,-1.2, 0.4, 2) hideCard both;
        }

        .no-project-found {
            order: 999;
        }

        aside {
            order: 1000;
        }
    }

    @keyframes hideCard {
        from {
            max-height: var(--project-card-max-height); 
            opacity: 1;
            padding: 1em;
        }
        
        to {
            border-width: 0;
            max-height: 0;
            padding: 0 1em;
            margin-bottom: 0;
            opacity: 0;
        }
    }
    
    @keyframes showCard {
        from {
            border-width: 0;
            max-height: 0;
            padding: 0 1em;
            margin-bottom: 0;
            opacity: 0;
        }

        to {
            max-height: var(--project-card-max-height); 
            /* padding: 1em;
            margin-bottom: 1em; */
            opacity: 1;
        }
    }
    
    /* When ProjectCard changes their height. 
        Not really a good solution but not sure any other solution */
    @media (max-width: 60em) {
        .project-container {
            --project-card-max-height: 30em;
        }
    }

    @media (max-width: 40em) {
        .container {
            flex-direction: column;
        }

        .filter-panel {
            position: static;
            width: calc(100% - 2em);
        }

        .filter-tag-tab {
            flex-direction: row;
            flex-wrap: wrap;

            /* .filter-tag-container { */
                /* TODO: Test this, wrap with background color? */
                /* padding: 0.5em; */
                /* border: 2px solid #666; */
                /* background-color: color-mix(in srgb, var(--color-secondary) 100%, var(--tag-color) 25%); */

                /* border-radius: 0.5em; */
                /* width: fit-content; */
            /* } */
        }
    }
</style>

<script>
    let includeTags: string[] = [];
    let excludeTags: string[] = [];
    
    const includeTagClass = "include-tag";
    const excludeTagClass = "exclude-tag";

    let searchText = "";

    let sortBy = "default"; 
    let sortOrder_IsAscending = true; // Simplify it by storing as a boolean instead of "ASC" and "DESC"
    const descendingClass = "descending";

    interface ProjectCardData {
        projectCardEl: HTMLAnchorElement;
        tags: string[];
        title: string;
        rank: number;
        timeSinceCreated: number;
        timeSinceReleased: number;
        duration: number;
    }

    const projectElements = document.getElementsByClassName("project-card");
    const projectsData = new Array<ProjectCardData>();

    const filterPanel = document.querySelector(".filter-panel") as HTMLDivElement;
    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    const sortByDropdown = document.getElementById("sort-by") as HTMLSelectElement;
    const sortOrderIcon = document.querySelector(".sort-order-icon") as HTMLOrSVGImageElement;

    const noProjectsFoundCard = document.getElementById("no-project-found");
    
    // Retrieving the project data for easier use later
    for (const project of projectElements) {
        const projectHtmlAnchorEl = project as HTMLAnchorElement;
        const tags = projectHtmlAnchorEl.dataset.tags?.split(',');
        const title = projectHtmlAnchorEl.dataset.title;
        const rank = projectHtmlAnchorEl.dataset.rank;
        const timeSinceCreated = projectHtmlAnchorEl.dataset.timeSinceCreated;
        const timeSinceReleased = projectHtmlAnchorEl.dataset.timeSinceReleased;
        const duration = projectHtmlAnchorEl.dataset.duration;
        if (!tags || !title || !rank || !timeSinceCreated || !timeSinceReleased || !duration) {
            console.error("Can't find project data");
            console.error(projectHtmlAnchorEl.dataset)
            continue;
        }

        const data: ProjectCardData = {
            projectCardEl: projectHtmlAnchorEl,
            tags: tags,
            title: title,
            rank: parseInt(rank),
            timeSinceCreated: parseFloat(timeSinceCreated),
            timeSinceReleased: parseFloat(timeSinceReleased),
            duration: parseFloat(duration),
        };
        projectsData.push(data)
    }
    
    UpdatePage();

    // Selecting space bar if user presses '/'
    document.addEventListener('keydown', (event) => {
        if (event.key == '/') {
            searchInput.focus();
            event.preventDefault();
        }
    });

    // Register when the search input updates
    searchInput?.addEventListener("input", () => {
        searchText = searchInput.value;
        UpdateProjects();
    });

    // Register OnClick event listeners for tags
    const tags = filterPanel.getElementsByClassName("tag");
    for (const tag of tags) {
        const tagValue = (tag as HTMLElement).dataset.tag;
        if (!tagValue)
        {
            console.error("Can't find tag");
            continue;
        }

        tag.addEventListener("click", () => {
            // Replace include with exclude class
            if (tag.classList.contains(includeTagClass)) {
                tag.classList.replace(includeTagClass, excludeTagClass);
                
                includeTags.splice(includeTags.indexOf(tagValue), 1);
                excludeTags.push(tagValue);
            }
            // Remove exclude class (This tag isn't included or excluded)
            else if (tag.classList.contains("exclude-tag")) {
                tag.classList.remove(excludeTagClass);
                
                excludeTags.splice(excludeTags.indexOf(tagValue), 1);
            }
            // Add Include class
            else {
                tag.classList.add(includeTagClass);
                
                includeTags.push(tagValue);
            }

            UpdateProjects();
        })
    }

    sortByDropdown?.addEventListener("change", () => {
        sortBy = sortByDropdown.options[sortByDropdown.selectedIndex].value;
        UpdateProjects();
    })

    sortOrderIcon?.addEventListener("click", () => {
        sortOrderIcon.classList.toggle(descendingClass);
        sortOrder_IsAscending = !sortOrderIcon.classList.contains(descendingClass);
        UpdateProjects();
    })

    // Register when the back button is pressed.
    // Docs: https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event
    window.addEventListener("popstate", UpdatePage);

    // Use this to refresh classes in the whole page
    function UpdatePage() {
        GetInfoFromURL();
        searchInput.textContent = searchText;

        UpdateTagStatus();
        UpdateSortOptions();
        UpdateProjectVisibility();
    }

    // Use this on user interaction, changing a search parameter
    function UpdateProjects() {
        UpdateProjectVisibility();
        UpdateURL();
    }

    function UpdateProjectVisibility() {
        let count = 0;
        const searchTextLowerCase = searchText.toLowerCase();

        // console.log(`IncludeTags: ${includeTags} \nExcludeTags: ${excludeTags}`);
        for (const project of projectsData) {
            const ifShow = 
                (!searchText || project.title.toLowerCase().includes(searchTextLowerCase)) &&
                // Check if the project includes all include tags
                // (includeTags.length === 0 || project.tags.some((el) => includeTags.includes(el))) && // Check if ANY include tag
                (includeTags.length === 0 || includeTags.every((el) => project.tags.includes(el))) && // Check if ALL include tag
                // Check if the project has any of the excluded tags
                (excludeTags.length === 0 || excludeTags.some((el) => !project.tags.includes(el)));
            
            if (ifShow)
                count++;
            
            project.projectCardEl?.classList.toggle("hide", !ifShow)
        }

        // Hide this if there is at least 1 project
        noProjectsFoundCard?.classList.toggle("hide", count > 0);

        UpdateProjectOrder();
    }

    function UpdateTagStatus() {
        const tags = filterPanel.getElementsByClassName("tag");
        for (const tag of tags) {
            const tagValue = (tag as HTMLElement).dataset.tag;
            if (!tagValue)
            {
                console.error("Can't find tag");
                continue;
            }

            tag.classList.toggle(includeTagClass, includeTags.includes(tagValue));
            tag.classList.toggle(excludeTagClass, excludeTags.includes(tagValue));
        }
    }

    function UpdateSortOptions() {
        sortByDropdown.value = sortBy;
        sortOrderIcon.classList.toggle(descendingClass, !sortOrder_IsAscending);
    }

    function GetInfoFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlParams.entries());

        // NOTE: Resets the variable to it's default value if it isn't in the search parameters

        searchText = params["search"] ?? "";

        includeTags = params["include"]?.split(",") ?? [];
        excludeTags = params["exclude"]?.split(",") ?? [];
        
        sortBy = params["sort-by"]?.toLowerCase() ?? "default";

        // Default value is ascending
        // Just check if it's descending, if it isn't, it's either "ASC" or some unknown value so set to default (ascending);
        sortOrder_IsAscending = params["sort-direction"] !== "DESC";

        // console.log("========= NEW URL =========");
        // console.log("include: " + includeTags);
        // console.log("exclude: " + excludeTags);
        // console.log("search: " + searchText);
    }

    function UpdateURL() {
        const url = new URL(window.location.href);
        const searchParams = new URLSearchParams();
        if (searchText)
            searchParams.set("search", searchText);

        if (includeTags && includeTags.length > 0)
            searchParams.set("include", includeTags.toString());
        if (excludeTags && excludeTags.length > 0)
            searchParams.set("exclude", excludeTags.toString());

        if (sortBy !== "default")
            searchParams.set("sort-by", sortBy);
        if (!sortOrder_IsAscending)
            searchParams.set("sort-direction", "DESC");

        // window.location.search = searchParams.toString();
        history.pushState({}, '', url.origin + url.pathname + "?" + searchParams.toString());
    }

    function UpdateProjectOrder() {
        switch (sortBy) {
            case "default": projectsData.sort((a, b) => a.rank - b.rank); break;
            case "time-since-created": projectsData.sort((a, b) => a.timeSinceCreated - b.timeSinceCreated); break;
            case "time-since-released":
                projectsData.sort((a, b) => {
                    // If both dates are the same, use the time since created
                    // Happens often, mainly when project is still ongoing and "date released" is today.
                    if (a.timeSinceReleased !== b.timeSinceReleased)
                        return a.timeSinceReleased - b.timeSinceReleased;
                    else 
                        return a.timeSinceCreated - b.timeSinceCreated;
                }); 
                break;
            case "duration": 
                projectsData.sort((a, b) => {
                    // If both durations are equal, compare the rank
                    // Happens often, mainly for small projects and game jams.
                    if (a.duration !== b.duration)
                        return a.duration - b.duration; 
                    else 
                        return a.rank - b.rank; 
                }); 
                break;
            case "alphabetically": projectsData.sort((a, b) => a.title.localeCompare(b.title)); break;
            default: console.error("Unknown sort-by option: " + sortBy); break;
        }
        
        // If sort ascending, swap a and b
        if (!sortOrder_IsAscending) {
            projectsData.reverse();
        }
        
        projectsData.forEach((project, index) => {
            project.projectCardEl.style.order = index.toString();
        })
    }
</script>