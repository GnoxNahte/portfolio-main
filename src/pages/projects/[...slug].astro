---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from 'astro:assets';
import TagContainer from "../../components/TagContainer.astro";
import { GetDuration } from "../../scripts/utilities";

// Generate a new path for every collection entry
export async function getStaticPaths()  {
    const projectEntries = await getCollection('projects');
    return projectEntries.map(project => ({
        params: { slug: project.slug }, props: { project },
    }));
}

export interface Props {
    project: CollectionEntry<'projects'>;
}

const { project } = Astro.props as Props;
const { Content } = await project.render();

// For easier access
const data = project.data;
console.error(data)

const dateOptions: Intl.DateTimeFormatOptions = { day: "numeric", month: "long", year: "numeric" };
// TODO (LOW): Detect the user's location using window.navigator.language
// But need to use <script></script>
const userLocale="en-UK";

let duration = "";
if (data.startDate && data.releaseDate)
{
    duration = GetDuration(data.startDate, data.releaseDate);
}

---

<Layout title={data.title} description={data.shortDescription}>
    {data.bannerImg && <div class="banner-container" style={data.bannerBackgroundColor && ("background-color: " + data.bannerBackgroundColor)}>
        <Image 
            src={data.bannerImg} 
            alt={"Banner for " + data.title} 
            class:list={["banner"]}
            style={data.bannerMaxWidth && ("max-width: " + data.bannerMaxWidth)}
        />
    </div>}
    <article>
        <h1 class="title">{project.data.title}</h1>
        { data.subtitle && <p class="subtitle">{data.subtitle}</p> }
        { data.releaseDate ? 
            <p>Date: <span class="date">{data.startDate.toLocaleDateString(userLocale, dateOptions)} - {data.releaseDate.toLocaleDateString(userLocale, dateOptions)} ({duration})</span></p>
            :
            <p>Date: <span class="date">{data.startDate.toLocaleDateString(userLocale, dateOptions)} - Ongoing</span></p>
        }
        <div class="tag-container">
            <p>Tags: </p>
            <TagContainer tags={data.tags} />
        </div>
        <ul class="list-of-links">
            Links:
            {data.projectLink != null && <li><a href={data.projectLink} target="_blank">Project Link</a></li>}
            {data.githubLink != null && <li><a href={data.githubLink} target="_blank">GitHub Link</a></li>}
        </ul>
        
        <div class="markdown">
            <Content />
        </div>
    </article>
</Layout> 

<style>
    .banner-container {
        --banner-height: 300px;
        position: relative;

        /* margin-top: 30px; */
        max-height: var(--banner-height);
        overflow-y: hidden;
        
        mask: linear-gradient(#FFF min(50px, 50%), transparent calc(min(var(--banner-height), 100%)));
    }
    
    .banner {
        display: block;
        /* max-width: 1920px; */
        /* max-width: 50em; */
        width: 100%;
        margin-left: auto;
        margin-right: auto;
        /* border-radius: 1em; */
    }
    
    /* Anchor the banner image to the bottom */
    .banner-bottom {
        margin-top: 100px;
        position: absolute;
        bottom: 0;
    }

    .banner-container + article h1 {
        margin-top: 0;
    }

    h1:has(+ .subtitle) {
        margin-bottom: 0;
    }
    
    .subtitle {
        color: rgb(164, 157, 145);;
        margin: 0;
    }

    .tag-container {
        display: flex;
        gap: 0.25em;
        margin: 0;

        p {
            margin: 0;
        }
    }

    .list-of-links {
        list-style: none;
        padding: 0;
        display: flex;
        gap: 0.25em;
    }
</style>

<!-- Markdown styling needs to be global: https://github.com/withastro/astro/issues/3045 -->
<style is:global>
    
    .markdown img {
        width: 100%;
        height: unset;
        max-width: 500px;
        max-height: 100vh;
        margin: 20px auto;
        object-fit: contain;
    }

    .markdown a {
        text-decoration: underline;
    }

    .markdown h2 {
        margin-bottom: 0.5em;
        /* font-size: 1.75em; */
    }

    .markdown code {
        background-color: #444;
        padding: 0.2em 0.4em;
        border-radius: 7px;
    }

    .markdown .person-a {
        background-color: #6a2fca;
    }
    
    .markdown .person-b {
        background-color: #2366c4;
    }
    
    .markdown .person-a,
    .markdown .person-b {
        border-radius: 5px;
        padding: 0 .4em;
        display: inline-block;
        margin: 5px 0;
        /* width: 2.75em; */
        text-align: center;
    }

</style>

<script>
    const links = document.getElementsByTagName("a");
    for (let i = 0; i < links.length; i++) {
        const link = links[i];
        const url = new URL(link.href);
        if (url.host !== window.location.host)
            link.target = "_blank";    
    }
</script>