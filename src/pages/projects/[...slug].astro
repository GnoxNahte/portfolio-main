---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from 'astro:assets';
import TagContainer from "../../components/TagContainer.astro";
import { GetDuration } from "../../scripts/utilities";
import TableOfContent from "../../components/TableOfContent/TableOfContent.astro";
import ItchIcon from "../../images/icons/social/ItchIcon.svg";
import ObsidianIcon from "../../images/icons/logos/ObsidianIcon.astro";
import InternetIcon from "../../images/icons/general/InternetIcon.astro";
import GitHubTransparent from "../../images/icons/logos/GitHubTransparent.astro";
import ReviewsIcon from "../../images/icons/general/ReviewsIcon.astro";

// Generate a new path for every collection entry
export async function getStaticPaths()  {
    const projectEntries = await getCollection('projects');
    return projectEntries.map(project => ({
        params: { slug: project.slug }, props: { project },
    }));
}

export interface Props {
    project: CollectionEntry<'projects'>;
}

const { project } = Astro.props as Props;
const { Content, headings } = await project.render();

// For easier access
const data = project.data;
console.error(data)

const dateOptions: Intl.DateTimeFormatOptions = { day: "numeric", month: "long", year: "numeric" };
// TODO (LOW): Detect the user's location using window.navigator.language
// But need to use <script></script>
const userLocale="en-UK";

let duration = GetDuration(data.startDate, data.releaseDate ?? new Date());

enum ProjectType {
    None,
    Itch,
    ObsidianPlugin,
    Website,
}

let projectType: ProjectType;
if (!data.projectLink) 
    projectType = ProjectType.None;
else if (/https:\/\/[\w]+\.itch\.io\/[\w-]+/.test(data.projectLink))
    projectType = ProjectType.Itch;
else if (/https:\/\/obsidian\.md\/plugins\?id\=[\w-]+/.test(data.projectLink))
    projectType = ProjectType.ObsidianPlugin;
else
    projectType = ProjectType.Website;

---

<Layout title={data.title} description={data.shortDescription}>
    {data.bannerImg && <div class="banner-container" style={data.bannerBackgroundColor && ("background-color: " + data.bannerBackgroundColor)}>
        <Image 
            src={data.bannerImg} 
            alt={"Banner for " + data.title} 
            class:list={["banner"]}
            style={data.bannerMaxWidth && ("max-width: " + data.bannerMaxWidth)}
        />
    </div>}
    <div class="layout-container">
        <article>
            <h1 class="title">{project.data.title}</h1>
            { <p class="subtitle">{ data.subtitle ?? data.shortDescription }</p> }
            { data.releaseDate ? 
                <p>Date: <span class="date">{data.startDate.toLocaleDateString(userLocale, dateOptions)} - {data.releaseDate.toLocaleDateString(userLocale, dateOptions)} ({duration})</span></p>
                :
                <p>Date: <span class="date">{data.startDate.toLocaleDateString(userLocale, dateOptions)} - Ongoing</span></p>
            }
            <ul class="list-of-links icon-single-color">
                Links:
                {data.projectLink != null && 
                    <li>
                        <a href={data.projectLink} target="_blank">
                            {
                            // If is an Itch project
                            projectType === ProjectType.Itch ? 
                                <Image src={ItchIcon} alt="Itch.io Icon" title={`Itch.io project page for ${data.title}`} class="itch"/> :
                                // If is an Obsidian project
                                projectType === ProjectType.ObsidianPlugin ? 
                                    <ObsidianIcon title={`Obsidian Plugin download page for ${data.title}`}/> :
                                    // Use the general internet/website icon if not sure what the website points to
                                    <InternetIcon title={`Website page for Project: ${data.title}`}/>
                            }
                        </a>
                    </li>
                }
                {data.githubLink != null && <li><a href={data.githubLink} target="_blank"><GitHubTransparent title={`GitHub Page for ${data.title}`} /></a></li>}
                {data.reviewsLink != null && <li><a href={data.reviewsLink} target="_blank"><ReviewsIcon title={`Reviews website for ${data.title}`} /></a></li>}
            </ul>
            
            <div class="tag-container">
                <p>Tags: </p>
                <TagContainer tags={data.tags} ifAddLink={true} />
            </div>
            <div class="markdown">
                <Content />
            </div>
        </article>

        <TableOfContent headings={headings}/>
    </div>
</Layout> 

<style>
    .banner-container {
        --banner-height: 300px;
        position: relative;

        /* margin-top: 30px; */
        max-height: var(--banner-height);
        overflow-y: hidden;
        
        mask: linear-gradient(#FFF min(50px, 50%), transparent calc(min(var(--banner-height), 100%)));
    }
    
    .banner {
        display: block;
        /* max-width: 1920px; */
        /* max-width: 50em; */
        width: 100%;
        margin-left: auto;
        margin-right: auto;
        /* border-radius: 1em; */
    }
    
    /* Anchor the banner image to the bottom */
    .banner-bottom {
        margin-top: 100px;
        position: absolute;
        bottom: 0;
    }

    .layout-container {
        display: flex;
        padding: 0 2em;
        max-width: 80em;
        margin-left: auto;
        margin-right: auto;
        justify-content: center;
        transition: padding 1s linear;
        
        article {
            margin-left: 0;
            margin-right: 0;

            padding: 0;
        }
    }

    article > h1 {
        margin-top: 0;
        margin-bottom: 0;
    }
    
    article > div,
    article > ul {
        margin-top: 0;
        margin-bottom: 0.75em;
    }

    .subtitle {
        /* color: rgb(164, 157, 145); */
        opacity: 0.6;
        margin: 0;
    }

    p:has(.date) {
        margin-top: 0;
    }

    .tag-container {
        display: flex;
        gap: 0.25em;
        margin: 0;

        p {
            margin: 0;
        }
    }

    /* Hide if don't have any links */
    .list-of-links:not(.list-of-links:has(li)) {
        display: none;
    }

    .list-of-links {
        list-style: none;
        padding: 0;
        display: flex;
        align-items: center;
        gap: 0.4em;

        li {
            height: 2em;
        }

        svg, img {
            width: 2em;
            height: 2em;
        }
    }

    @media (max-width: 70em) {
        .layout-container {
            padding: 0 1em;
        }
    }
</style>

<!-- Markdown styling needs to be global: https://github.com/withastro/astro/issues/3045 -->
<style is:global>
    
    .markdown img {
        width: 100%;
        height: unset;
        max-width: 500px;
        max-height: 100vh;
        margin: 20px auto;
        object-fit: contain;
        border-radius: 1em;
    }
    
    .markdown a {
        text-decoration: underline;
    }

    h2 {
        padding-bottom: 5px;
        margin-bottom: 0.5em;
        position: relative;
        /* border-bottom: solid 2px #4e4ecb77; */
        &::after {
            content:"";
            position:absolute;
            z-index:-1;
            height: 3px;
            width: calc(100% + 0.5em); /* to offset highlighted heading */
            left:0;
            right:0;
            bottom: -10px;
            /* color: #224884; */
            /* backdrop-filter:brightness(60%); */
            backdrop-filter:brightness(200%);
        }
    }

    .markdown pre {
        display: block;
        box-sizing: border-box;
        width: 100%;
        border-radius: 0.5em;
        /* width: 38em; */
        counter-reset: line;
    }

    .markdown pre code {
        display: block;
        box-sizing: border-box;
        padding: 1.5em;
        /* word-break: break-all; */
        /* Not sure why overflow-x isn't working. It resizes the whole layout-container instead. 
            For now, wrap everything */
        overflow-x: auto;
        white-space: pre-wrap;

        /* Not sure why it has a empty line at the end. But just remove it */
        & > span:last-child:empty {
            display: none;
        }
    }

    /* Add line numbers */
    .markdown code > span:before {
        counter-increment: line;
        content: counter(line);
        display: inline-block;
        border-right: 1px solid #ddd;
        padding: 0 0em;
        margin-right: 1em;
        width: 1.1em;
        color: #888
    }

    .markdown .person-a {
        background-color: #6a2fca;
    }
    
    .markdown .person-b {
        background-color: #2366c4;
    }
    
    .markdown .person-a,
    .markdown .person-b {
        border-radius: 5px;
        padding: 0 .4em;
        display: inline-block;
        margin: 5px 0;
        /* width: 2.75em; */
        text-align: center;
    }

    /* For highlighting headings */
    @keyframes highlightFade {
        from { background-color: var(--color-primary); }
        to { background-color: transparent; }
    }

    .markdown {
        h1, h2, h3, h4, h5, h6 {
            /* Do this to have some spacing on the left for the highlight */
            padding: 0.1em 0.5em;
            transform: translateX(-0.5em);
            
            border-radius: 5px;

            &.highlight-header {
                animation: highlightFade 2s ease-out;
            }
        }
    }


</style>

<script>
    const links = document.getElementsByTagName("a");
    for (let i = 0; i < links.length; i++) {
        const link = links[i];
        const url = new URL(link.href);
        if (url.host !== window.location.host)
            link.target = "_blank";    
    }

    // Add a link icon to all headers
    // const markdown = document.querySelector(".markdown");
    // const headings = markdown?.querySelectorAll("h1, h2, h3, h4, h5, h6");
    // headings?.forEach((heading) => {
    //     const link = document.createElement("a");
    //     link.text = "Link";
    //     link.href = `#${FormatHeadingToLink(heading.textContent ?? "")}`;
    //     link.classList.add("heading-link");
    //     heading.appendChild(link);
    // })

    // Highlight heading on page load or when clicking on heading
    function highlightHeading() {
        const hash = window.location.hash;
        
        if (!hash)
            return;

        const header = document.querySelector(hash)as HTMLHeadingElement;
        if (!header)
            return;

        // Resets it
        header.classList.remove("highlight-header");
        void header.offsetWidth; 

        header.classList.add("highlight-header");
    }
    
    highlightHeading();
    window.addEventListener("hashchange", highlightHeading);

</script>