---
import { Image } from 'astro:assets';
import Layout from "../layouts/Layout.astro";
// Game Dev Thumbnails
import SentientBuffetImg from "../images/gamedev/SentientBuffet/SentientBuffet_Banner.png";
import SpellboundRollersImg from "../images/gamedev/SpellboundRollers/SpellboundRollers_Banner.png";
// import TheGreatTunaEscapeImg from "../images/gamedev/TheGreatTunaEscape_Thumbnail2.png";
import AwakenTheChaosImg from "../images/gamedev/AwakenTheChaos/AwakenTheChaos_Thumbnail.png";
import IWP_Img from "../images/gamedev/IndependentWorkProject/IWP_Warrior.png";
// Web Dev Thumbnails
// import EventRegistrationImg from "../images/webdev/EventRegistration/EventRegistration_Icon.png";
import OldPortfolioImg from "../images/webdev/OldPortfolioWebsite/Banner.png"
import PortfolioImg from "../images/webdev/PortfolioWebsite/Thumbnail.png"
import ObsidianAutoEmbed from "../images/webdev/ObsidianAutoEmbed/AutoEmbed_Preview.gif"

// const images = await Astro.glob("../images/");
// console.log("Imagecount: " + images.length);

// TODO: Change all to gifs
const gamedevThumbnails: ImageMetadata[] = [SpellboundRollersImg, SentientBuffetImg,  AwakenTheChaosImg, IWP_Img];
const webdevThumbnails: ImageMetadata[] = [ObsidianAutoEmbed, PortfolioImg, OldPortfolioImg];

const repeatArray = new Array<number>(4).fill(0);
---
<Layout title='Home' description="Home page" showHeader={false} showFooter={false}>
	<Fragment slot="head">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&family=Permanent+Marker&family=Sedgwick+Ave&display=swap" rel="stylesheet">		
	</Fragment>
	<div class="thumbnail-list" id="gamedev-thumbnail">
		{
			repeatArray.map(() => (
				gamedevThumbnails.map((thumbnail) => (
					<Image src={thumbnail} alt={"Thumbnail"} class="thumbnail" widths={[360,720,1080,1920]}/>
				))
			))
		}
	</div>
	<div class="thumbnail-list" id="webdev-thumbnail">
			{
				repeatArray.map(() => (
					webdevThumbnails.map((thumbnail) => (
						<Image src={thumbnail} alt={"Thumbnail"} class="thumbnail" widths={[360,720,1080,1920]}/>
					))
				))
			}
	</div>
	<div class="container">
		<h1>Hi I'm Ethan,<br>Welcome to my Website!</h1>
		<h2>Are you here for</h2>
		<p>
			<a href="https://gamedev.gnoxnahte.dev" id="gamedev-link">Game Development</a>
			OR
			<a href="https://webdev.gnoxnahte.dev" id="webdev-link">Web Development</a>
		</p>
		<p>
			<a href="/projects/" id="all-projects-link">View all projects</a>
		</p>
	</div>
	<div id="about-link">
		<a href="/about/" data-astro-prefetch>About Me</a>
	</div>
</Layout>

<style>
	html {
		overflow: hidden;
		height: 100vh;
	}
	body {
		height: 100%;
		text-align: center;
		font-family: "Permanent Marker", cursive;
  		font-style: normal;
		font-weight: 500;
		/* Scales with different size */
		/* But doesn't change size when zoom the page. */
		font-size: max(min(2vw, 2vh), 1em);
	}

	h1, h2 {

		text-align: center;
		margin: 10px 0;
		letter-spacing: 1.5px;
	}
	h1 {
		text-transform: uppercase;
	}
	
	/* Remove the line below h2 */
	h2 {
		padding-bottom: 0;
    	margin-bottom: 0;
		border-bottom: none;
	}
	p {
		font-family: system-ui, sans-serif;
		text-align: center;
		margin: 0;
		margin-top: 20px;
	}
	a {
		pointer-events: all;
		transition: font .25s;
		padding: 10px 0;
	}
	a:link, a:visited {
		color: unset;
	}

	/* Emphasize the link when depending on which type of project they are hovering over */
	/* Any link hover */
	a:hover,
	/* Emphasize link when user hover overs the gamedev thumbnails */
	#gamedev-thumbnail:hover ~ .container #gamedev-link,
	/* Emphasize link when user hover overs the gamedev thumbnails */
	#webdev-thumbnail:hover ~ .container #webdev-link {
		font-size: 1.15em;
		font-weight: bolder;
	}

	.container {
		/* --container-backdrop-filter: blur(8px) contrast(1.1); */
		--container-backdrop-filter: blur(4px) contrast(1.1);

		display: flex;
		flex-direction: column;
		align-content: center;
		justify-content: center;
		backdrop-filter: var(--container-backdrop-filter);
		-webkit-backdrop-filter: var(--container-backdrop-filter);
		mask-image: radial-gradient(ellipse, black 50%, transparent 75%);
		padding: 0 15vw;
		pointer-events: none;
		height: 90%;
		margin-bottom: 50px;
	}

	:global(.light) .container {
		--container-backdrop-filter: blur(10px);

		background-color: rgba(255, 255, 255, 0.1);
		transition: backdrop-filter 0.5s;
	}
	.thumbnail-list {
		user-select: none;
		position: absolute;
		display: flex;
		flex-direction: column;
		top: 0;
		width: 1vh;
		width: 45vw;
		opacity: .2;
		animation: 30s linear 0s infinite normal;
		transition: opacity 0.5s;
	}

	/* Increase opacity to emphasize which project type they are hovering over */
	.thumbnail-list:hover,
	#gamedev-thumbnail:has(~ .container #gamedev-link:hover),
	#webdev-thumbnail:has(~ .container #webdev-link:hover),
	.thumbnail-list:has(~ .container #all-projects-link:hover) {
		opacity: 0.6;
	}

	:global(.light) .thumbnail-list {
		opacity: 0.4;

		&:hover, &.hover {
			opacity: 0.7;
		}
	}

	#gamedev-thumbnail{
		left: 2.5vw;
		animation-name: slow-scroll;
	}
	#webdev-thumbnail{
		right: 2.5vw;
		animation-name: slow-scroll;
		animation-direction: reverse;
	}
	.thumbnail {
		width: 100%;
		height: auto;
		max-height: 100vh;
		object-fit: contain;
		margin: 10px 0;
		border-radius: 15px;
		-webkit-user-drag: none;
		user-select: none;
	}

	@keyframes slow-scroll {
		from {
			translate: 0 -50%;
		}
		to {
			translate: 0 0;
		}
	}

	#about-link {
		position: absolute;
		bottom: 2em;
		left: 0;
		right: 0;
		font-size: 1.2em;
		font-weight: bolder;
	}

</style>

<!-- <script>
	// ===== Change animation duration based on height =====
	// TODO: Add on resize listener
	// TODO: Change animation speed instead of duration
	const animSpeed = 150; // In pixels per seconds
	gamedevThumbnail.style.animationDuration = (gamedevThumbnail.clientHeight / animSpeed).toString() + "s";
	webdevThumbnail.style.animationDuration = (webdevThumbnail.clientHeight / animSpeed).toString() + "s";
</script> -->